import tkinter as tk
from tkinter import scrolledtext, messagebox
import requests
from bs4 import BeautifulSoup
from requests.exceptions import RequestException
import threading

# Function for BeautifulSoup search
def test_search_elements(url, tag, attribute=None, value=None):
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0"
        }
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, "html.parser")
        if attribute and value:
            elements = soup.find_all(tag, {attribute: value})
        else:
            elements = soup.find_all(tag)
        return [element.get_text(separator="\n", strip=True) for element in elements]
    except RequestException as e:
        return [f"An error occurred: {e}"]
    except Exception as e:
        return [f"An unexpected error occurred: {e}"]

# Tkinter GUI Setup
root = tk.Tk()
root.title("Simple Webpage Element Search Tool")
root.geometry("800x700")

# Example section
example_label = tk.Label(root, text="Example:")
example_label.grid(row=0, column=0, padx=10, pady=5, sticky='w')
example_text = ("URL: https://www.therupturedduck.com/collections/recently-added-items/products/vintage-50-star-us-flag-veteran-family-acquired\n"
                "Tag: span\n"
                "Attribute: id\n"
                "Value: ProductPrice")
example_display = tk.Label(root, text=example_text, justify='left')
example_display.grid(row=1, column=0, columnspan=2, padx=10, pady=5, sticky='w')

# URL input
label_url = tk.Label(root, text="Enter URL:")
label_url.grid(row=2, column=0, padx=10, pady=5, sticky='e')
entry_url = tk.Entry(root, width=50)
entry_url.grid(row=2, column=1, padx=10, pady=5)

# Tag input
label_tag = tk.Label(root, text="Enter Tag:")
label_tag.grid(row=3, column=0, padx=10, pady=5, sticky='e')
entry_tag = tk.Entry(root, width=50)
entry_tag.grid(row=3, column=1, padx=10, pady=5)

# Attribute input
label_attribute = tk.Label(root, text="Enter Attribute (optional):")
label_attribute.grid(row=4, column=0, padx=10, pady=5, sticky='e')
entry_attribute = tk.Entry(root, width=50)
entry_attribute.grid(row=4, column=1, padx=10, pady=5)

# Value input
label_value = tk.Label(root, text="Enter Value (optional):")
label_value.grid(row=5, column=0, padx=10, pady=5, sticky='e')
entry_value = tk.Entry(root, width=50)
entry_value.grid(row=5, column=1, padx=10, pady=5)

# Result output area
result_text = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=50, height=10)
result_text.grid(row=8, column=0, columnspan=2, padx=10, pady=5)

# Loading label
loading_label = tk.Label(root, text="")
loading_label.grid(row=7, column=0, columnspan=2, pady=5)

# Function to handle the form submission and display results
def on_submit():
    loading_label.config(text="Loading...")
    result_text.delete("1.0", tk.END)

    def run_search():
        url = entry_url.get().strip()
        tag = entry_tag.get().strip()
        attribute = entry_attribute.get().strip()
        value = entry_value.get().strip()

        if not url or not tag:
            messagebox.showwarning("Input Error", "Please enter both a URL and a tag.")
            loading_label.config(text="")
            return

        results = test_search_elements(url, tag, attribute if attribute else None, value if value else None)
        result_text.insert(tk.END, "\n\n".join(results))
        loading_label.config(text="")

    threading.Thread(target=run_search).start()

# Submit button
button_submit = tk.Button(root, text="Submit", command=on_submit)
button_submit.grid(row=9, column=0, columnspan=2, pady=15)

# Example Submit button
def on_example_submit():
    entry_url.delete(0, tk.END)
    entry_tag.delete(0, tk.END)
    entry_attribute.delete(0, tk.END)
    entry_value.delete(0, tk.END)

    entry_url.insert(0, "https://www.therupturedduck.com/collections/recently-added-items/products/vintage-50-star-us-flag-veteran-family-acquired")
    entry_tag.insert(0, "span")
    entry_attribute.insert(0, "id")
    entry_value.insert(0, "ProductPrice")

    on_submit()

button_example_submit = tk.Button(root, text="Submit Example", command=on_example_submit)
button_example_submit.grid(row=10, column=0, columnspan=2, pady=5)

root.mainloop()
